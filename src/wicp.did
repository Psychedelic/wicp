type DetailValue = variant {
  I64 : int64;
  U64 : nat64;
  Vec : vec DetailValue;
  Slice : vec nat8;
  Text : text;
  True;
  False;
  Float : float64;
  Principal : principal;
};
type IndefiniteEvent = record {
  operation : text;
  details : vec record { text; DetailValue };
  caller : principal;
};
type Metadata = record {
  fee : nat;
  decimals : nat8;
  owner : principal;
  logo : text;
  name : text;
  totalSupply : nat;
  symbol : text;
};
type Result = variant { Ok : nat; Err : TxError };
type StatsData = record {
  fee : nat;
  deploy_time : nat64;
  decimals : nat8;
  fee_to : principal;
  owner : principal;
  history_size : nat64;
  logo : text;
  name : text;
  total_supply : nat;
  symbol : text;
};
type TokenInfo = record {
  holderNumber : nat64;
  deployTime : nat64;
  metadata : Metadata;
  historySize : nat64;
  cycles : nat64;
  feeTo : principal;
};
type TxError = variant {
  InsufficientAllowance;
  InsufficientBalance;
  ErrorOperationStyle;
  Unauthorized;
  LedgerTrap;
  ErrorTo;
  Other;
  BlockUsed;
  AmountTooSmall;
};
type TxLog = record { ie_records : vec IndefiniteEvent };
service : (
  text,
  text,
  text,
  nat8,
  nat,
  principal,
  nat,
  principal,
  principal,
) -> {
  allowance : (principal, principal) -> (nat) query;
  approve : (principal, nat) -> (Result);
  balanceOf : (principal) -> (nat) query;
  decimals : () -> (nat8) query;
  getAllowanceSize : () -> (nat64) query;
  getAllowances : () -> (
      vec record { principal; vec record { principal; nat } },
    ) query;
  getBalances : () -> (vec record { principal; nat }) query;
  getBlockUsed : () -> (vec nat64) query;
  getHolders : (nat64, nat64) -> (vec record { principal; nat }) query;
  getMetadata : () -> (Metadata) query;
  getStats : () -> (StatsData) query;
  getTokenInfo : () -> (TokenInfo) query;
  getTxLogs : () -> (TxLog) query;
  getUseBlocks : () -> (vec nat64) query;
  getUserApprovals : (principal) -> (vec record { principal; nat }) query;
  historySize : () -> (nat64) query;
  isBlockUsed : (nat64) -> (bool) query;
  logo : () -> (text) query;
  mint : (opt vec nat8, nat64) -> (Result);
  mintFor : (opt vec nat8, nat64, principal) -> (Result);
  name : () -> (text) query;
  owner : () -> (principal) query;
  setFee : (nat) -> ();
  setFeeTo : (principal) -> ();
  setGenesis : () -> (Result);
  setLogo : (text) -> ();
  setName : (text) -> ();
  setOwner : (principal) -> ();
  symbol : () -> (text) query;
  totalSupply : () -> (nat) query;
  transfer : (principal, nat) -> (Result);
  transferFrom : (principal, principal, nat) -> (Result);
  withdraw : (nat64, text) -> (Result);
}