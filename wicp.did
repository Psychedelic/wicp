type GenericValue = variant {
  Nat64Content : nat64;
  Nat32Content : nat32;
  BoolContent : bool;
  Nat8Content : nat8;
  Int64Content : int64;
  IntContent : int;
  NatContent : nat;
  Nat16Content : nat16;
  Int32Content : int32;
  Int8Content : int8;
  FloatContent : float64;
  Int16Content : int16;
  BlobContent : vec nat8;
  NestedContent : Vec;
  Principal : principal;
  TextContent : text;
};
type InitArgs = record {
  cap : opt principal;
  fee : opt nat;
  decimals : opt nat8;
  fee_to : opt principal;
  logo : opt text;
  name : opt text;
  custodians : opt vec principal;
  symbol : opt text;
};
type ManualReply = record {
  metadata : Metadata;
  tx_records : vec TxEvent;
  allowances : vec record { principal; vec record { principal; nat } };
  used_blocks : vec nat64;
  balances : vec record { principal; nat };
};
type ManualReply_1 = variant { Ok : TxEvent; Err : TokenError };
type Metadata = record {
  cap : opt principal;
  fee : opt nat;
  decimals : opt nat8;
  fee_to : opt principal;
  logo : opt text;
  name : opt text;
  created_at : nat64;
  upgraded_at : nat64;
  custodians : vec principal;
  symbol : opt text;
};
type Result = variant { Ok : nat; Err : TokenError };
type Stats = record {
  icps : nat;
  cycles : nat;
  total_transactions : nat;
  total_unique_holders : nat;
  total_supply : nat;
};
type TokenError = variant {
  InsufficientAllowance;
  BlockError;
  InsufficientBalance;
  TxNotFound;
  ErrorOperationStyle;
  Unauthorized;
  LedgerTrap;
  ErrorTo;
  Other : text;
  BlockUsed;
  AmountTooSmall;
};
type TxEvent = record {
  time : nat64;
  operation : text;
  details : vec record { text; GenericValue };
  caller : principal;
};
type Vec = vec record {
  text;
  variant {
    Nat64Content : nat64;
    Nat32Content : nat32;
    BoolContent : bool;
    Nat8Content : nat8;
    Int64Content : int64;
    IntContent : int;
    NatContent : nat;
    Nat16Content : nat16;
    Int32Content : int32;
    Int8Content : int8;
    FloatContent : float64;
    Int16Content : int16;
    BlobContent : vec nat8;
    NestedContent : Vec;
    Principal : principal;
    TextContent : text;
  };
};
service : (opt InitArgs) -> {
  allowance : (principal, principal) -> (nat) query;
  approve : (principal, nat) -> (Result);
  backup : () -> (ManualReply) query;
  balanceOf : (principal) -> (nat) query;
  cap : () -> (opt principal) query;
  custodians : () -> (vec principal) query;
  cycles : () -> (nat) query;
  decimals : () -> (opt nat8) query;
  fee : () -> (opt nat) query;
  feeTo : () -> (opt principal) query;
  icps : () -> (nat) query;
  isBlockUsed : (nat64) -> (bool) query;
  logo : () -> (opt text) query;
  metadata : () -> (Metadata) query;
  mint : (opt vec nat8, nat64) -> (Result);
  name : () -> (opt text) query;
  setCap : (principal) -> ();
  setCustodians : (vec principal) -> ();
  setDecimals : (nat8) -> ();
  setFee : (nat) -> ();
  setFeeTo : (principal) -> ();
  setLogo : (text) -> ();
  setName : (text) -> ();
  setSymbol : (text) -> ();
  stats : () -> (Stats) query;
  symbol : () -> (opt text) query;
  totalSupply : () -> (nat) query;
  totalTransactions : () -> (nat) query;
  totalUniqueHolders : () -> (nat) query;
  transaction : (nat) -> (ManualReply_1) query;
  transfer : (principal, nat) -> (Result);
  transferFrom : (principal, principal, nat) -> (Result);
  withdraw : (nat, text) -> (Result);
}